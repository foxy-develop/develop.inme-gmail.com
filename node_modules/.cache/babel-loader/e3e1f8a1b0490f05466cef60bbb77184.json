{"remainingRequest":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js!/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/notifications.service.js","dependencies":[{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/notifications.service.js","mtime":1586273405221},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/notifications.service.js"],"names":["ApiService","API_NOTIFICATIONS","NotificationsError","errorCode","message","name","constructor","Error","NotificationsServive","getNotifications","date_from","date_to","limit","offset","type","post","LIST","response","status","data","detail","getCurrentNotification","notification_id","get","GET_CURRENT","readNotification","READ"],"mappings":"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","sourcesContent":["import ApiService from \"../services/api.service\";\nimport { API_NOTIFICATIONS } from \"./api.endpoints\";\n\nclass NotificationsError extends Error {\n  constructor(errorCode, message) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    this.errorCode = errorCode;\n  }\n}\nconst NotificationsServive = {\n  getNotifications: async ({ date_from = '', date_to = '', limit =  '', offset = 0, type = '' }) => {\n    try {\n      const response = await ApiService.post(API_NOTIFICATIONS.LIST,  {\n        date_from: date_from, date_to: date_to, limit: limit, offset: offset, type: type });\n      if (response && response.status && response.status == 200) {\n        return { status: response.data.status, data: response.data };\n      }\n    } catch (error) {\n      throw new NotificationsError(error.response.status, error.response.data.detail);\n    }\n  },\n  getCurrentNotification: async ({notification_id}) => {\n    try {\n      const response = await ApiService.get(API_NOTIFICATIONS.GET_CURRENT + notification_id);\n      if (response && response.status && response.status == 200) {\n        return { status: response.data.status, data: response.data };\n      }\n    } catch (error) {\n      throw new NotificationsError(error.response.status, error.response.data.detail);\n    }\n  },\n  readNotification: async ({ notification_id }) => {\n    try {\n      const response = await ApiService.post(API_NOTIFICATIONS.READ, { notification_id: notification_id });\n      if (response && response.status && response.status == 200) {\n        return { status: response.data.status, data: response.data };\n      }\n    } catch (error) {\n      throw new NotificationsError(error.response.status, error.response.data.detail);\n    }\n  },\n};\n\n\nexport default NotificationsServive;\nexport { NotificationsServive, NotificationsError };\n"]}]}