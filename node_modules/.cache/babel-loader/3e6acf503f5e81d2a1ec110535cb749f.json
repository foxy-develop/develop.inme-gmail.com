{"remainingRequest":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js!/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/user.service.js","dependencies":[{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/user.service.js","mtime":1586398403503},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9pbm1lMS9QaHBzdG9ybVByb2plY3RzL25ldy1jcC9kZXZlbG9wLmlubWUtZ21haWwuY29tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvaW5tZTEvUGhwc3Rvcm1Qcm9qZWN0cy9uZXctY3AvZGV2ZWxvcC5pbm1lLWdtYWlsLmNvbS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIi9Vc2Vycy9pbm1lMS9QaHBzdG9ybVByb2plY3RzL25ldy1jcC9kZXZlbG9wLmlubWUtZ21haWwuY29tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlciI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL1VzZXJzL2lubWUxL1BocHN0b3JtUHJvamVjdHMvbmV3LWNwL2RldmVsb3AuaW5tZS1nbWFpbC5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IF93cmFwTmF0aXZlU3VwZXIgZnJvbSAiL1VzZXJzL2lubWUxL1BocHN0b3JtUHJvamVjdHMvbmV3LWNwL2RldmVsb3AuaW5tZS1nbWFpbC5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3dyYXBOYXRpdmVTdXBlciI7CmltcG9ydCBBcGlTZXJ2aWNlIGZyb20gIi4uL3NlcnZpY2VzL2FwaS5zZXJ2aWNlIjsKaW1wb3J0IHsgVGhlbWVTZXJ2aWNlIH0gZnJvbSAiLi4vc2VydmljZXMvc3RvcmFnZS5zZXJ2aWNlIjsKaW1wb3J0IHsgQVBJX1VTRVIgfSBmcm9tICIuL2FwaS5lbmRwb2ludHMiOwoKdmFyIFVzZXJFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7CiAgX2luaGVyaXRzKFVzZXJFcnJvciwgX0Vycm9yKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihVc2VyRXJyb3IpOwoKICBmdW5jdGlvbiBVc2VyRXJyb3IoZXJyb3JDb2RlLCBtZXNzYWdlKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVzZXJFcnJvcik7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKTsKICAgIF90aGlzLm5hbWUgPSBfdGhpcy5jb25zdHJ1Y3Rvci5uYW1lOwogICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7CiAgICBfdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICByZXR1cm4gVXNlckVycm9yOwp9KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpOwoKdmFyIFVzZXJTZXJ2aXZlID0gewogIHByb2ZpbGU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfcHJvZmlsZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIHJlc3BvbnNlLCBfcmVzcG9uc2U7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIEFwaVNlcnZpY2UuZ2V0KEFQSV9VU0VSLlBST0ZJTEUpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzID09IDIwMCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnN0YXR1cyAmJiBUaGVtZVNlcnZpY2Uuc2F2ZShyZXNwb25zZS5kYXRhLnByb2ZpbGUudGhlbWUpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gOTsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIF9yZXNwb25zZSA9IHsKICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX3Jlc3BvbnNlKTsKCiAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgOV1dKTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiBwcm9maWxlKCkgewogICAgICByZXR1cm4gX3Byb2ZpbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gcHJvZmlsZTsKICB9KCksCiAgdGhlbWU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdGhlbWUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgdGhlbWUsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHRoZW1lID0gVGhlbWVTZXJ2aWNlLmdldCgpID09PSAiZGFyayIgPyAibGlnaHQiIDogImRhcmsiOwogICAgICAgICAgICAgIFRoZW1lU2VydmljZS5zYXZlKHRoZW1lKTsKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnBvc3QoQVBJX1VTRVIuU1dJVENIX1RIRU1FLCB7CiAgICAgICAgICAgICAgICB0aGVtZTogdGhlbWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZSAmJiByZXNwb25zZS5kYXRhLnN0YXR1cykpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2UuZGF0YS5zdGF0dXMsCiAgICAgICAgICAgICAgICB0aGVtZTogdGhlbWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEwOwogICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKF9jb250ZXh0Mi50MC5yZXNwb25zZS5zdGF0dXMsIF9jb250ZXh0Mi50MC5yZXNwb25zZS5kYXRhLmRldGFpbCk7CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMiwgMTBdXSk7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gdGhlbWUoKSB7CiAgICAgIHJldHVybiBfdGhlbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gdGhlbWU7CiAgfSgpCn07CmV4cG9ydCBkZWZhdWx0IFVzZXJTZXJ2aXZlOwpleHBvcnQgeyBVc2VyU2Vydml2ZSwgVXNlckVycm9yIH07"},{"version":3,"sources":["/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/user.service.js"],"names":["ApiService","ThemeService","API_USER","UserError","errorCode","message","name","constructor","Error","UserServive","profile","get","PROFILE","response","status","data","save","theme","post","SWITCH_THEME","detail"],"mappings":";;;;;;;AAAA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,QAAT,QAAyB,iBAAzB;;IAEMC,S;;;;;AACJ,qBAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;AAAA;;AAAA;;AAC9B,8BAAOA,OAAP;AACA,UAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,UAAKD,OAAL,GAAeA,OAAf;AACA,UAAKD,SAAL,GAAiBA,SAAjB;AAJ8B;AAK/B;;;iCANqBI,K;;AASxB,IAAMC,WAAW,GAAG;AAClBC,EAAAA,OAAO;AAAA,2EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEkBV,UAAU,CAACW,GAAX,CAAgBT,QAAQ,CAACU,OAAzB,CAFlB;;AAAA;AAECC,cAAAA,QAFD;;AAAA,oBAGDA,QAAQ,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAH9B;AAAA;AAAA;AAAA;;AAIHD,cAAAA,QAAQ,CAACE,IAAT,CAAcD,MAAd,IAAwBb,YAAY,CAACe,IAAb,CAAkBH,QAAQ,CAACE,IAAT,CAAcL,OAAd,CAAsBO,KAAxC,CAAxB;AAJG,+CAKIJ,QAAQ,CAACE,IALb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQCF,cAAAA,SARD,GAQY;AAAEE,gBAAAA,IAAI,EAAE;AAAED,kBAAAA,MAAM,EAAE;AAAV;AAAR,eARZ;AAAA,+CASED,SATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADW;AAclBI,EAAAA,KAAK;AAAA,yEAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACCA,cAAAA,KADD,GACShB,YAAY,CAACU,GAAb,OAAuB,MAAvB,GAAgC,OAAhC,GAA0C,MADnD;AAELV,cAAAA,YAAY,CAACe,IAAb,CAAkBC,KAAlB;AAFK;AAAA;AAAA,qBAIoBjB,UAAU,CAACkB,IAAX,CAAgBhB,QAAQ,CAACiB,YAAzB,EAAuC;AAACF,gBAAAA,KAAK,EAALA;AAAD,eAAvC,CAJpB;;AAAA;AAIGJ,cAAAA,QAJH;;AAAA,oBAKCA,QAAQ,IAAIA,QAAQ,CAACE,IAAT,CAAcD,MAL3B;AAAA;AAAA;AAAA;;AAAA,gDAMM;AAACA,gBAAAA,MAAM,EAAED,QAAQ,CAACE,IAAT,CAAcD,MAAvB;AAA+BG,gBAAAA,KAAK,EAAEA;AAAtC,eANN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,oBASG,IAAId,SAAJ,CAAc,aAAMU,QAAN,CAAeC,MAA7B,EAAqC,aAAMD,QAAN,CAAeE,IAAf,CAAoBK,MAAzD,CATH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAda,CAApB;AA4BA,eAAeX,WAAf;AACA,SAASA,WAAT,EAAsBN,SAAtB","sourcesContent":["import ApiService from \"../services/api.service\";\nimport { ThemeService } from \"../services/storage.service\";\nimport { API_USER } from \"./api.endpoints\";\n\nclass UserError extends Error {\n  constructor(errorCode, message) {\n    super( message );\n    this.name = this.constructor.name;\n    this.message = message;\n    this.errorCode = errorCode;\n  }\n}\n\nconst UserServive = {\n  profile: async function() {\n    try {\n      const response = await ApiService.get( API_USER.PROFILE );\n      if (response && response.status == 200) {\n        response.data.status && ThemeService.save(response.data.profile.theme);\n        return response.data;\n      }\n    } catch ( error ) {\n      const response = { data: { status: false }};\n      return response\n      throw new UserError(error.response.status, error.response.data.detail)\n    }\n  },\n  theme: async function() {\n    const theme = ThemeService.get() === \"dark\" ? \"light\" : \"dark\";\n    ThemeService.save(theme);\n    try {\n      const response = await ApiService.post(API_USER.SWITCH_THEME, {theme});\n      if (response && response.data.status) {\n        return {status: response.data.status, theme: theme};\n      }\n    } catch ( error ) {\n      throw new UserError(error.response.status, error.response.data.detail)\n    }\n  }\n}\n\nexport default UserServive;\nexport { UserServive, UserError };\n"]}]}