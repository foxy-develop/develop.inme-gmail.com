{"remainingRequest":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js!/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/store/modules/charts-map.js","dependencies":[{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/store/modules/charts-map.js","mtime":1585969256089},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvaW5tZTEvUGhwc3Rvcm1Qcm9qZWN0cy9uZXctY3AvZGV2ZWxvcC5pbm1lLWdtYWlsLmNvbS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvaW5tZTEvUGhwc3Rvcm1Qcm9qZWN0cy9uZXctY3AvZGV2ZWxvcC5pbm1lLWdtYWlsLmNvbS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Cgp2YXIgX2FjdGlvbnMsIF9tdXRhdGlvbnM7CgppbXBvcnQgeyBNQVBfUkVRVUVTVCwgTUFQX1NVQ0NFU1MsIE1BUF9QUkVMT0FELCBNQVBfU1dJVENILCBNQVBfRVJST1IgfSBmcm9tICIuLi9hY3Rpb25zL2NoYXJ0cy1tYXAiOwppbXBvcnQgRGF0YVNlcnZpY2UgZnJvbSAiLi4vLi4vYXBpL2RhdGEuc2VydmljZSI7CmltcG9ydCB7IEFVVEhfTE9HT1VUIH0gZnJvbSAiLi4vYWN0aW9ucy9hdXRoIjsKaW1wb3J0IG1hcERhdGFNb2RlbCBmcm9tICIuLi9tb2RlbHMvbWFwIjsKdmFyIHN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgbWFwRGF0YU1vZGVsKTsKdmFyIGdldHRlcnMgPSB7CiAgZ2V0TWFwUGVyaW9kOiBmdW5jdGlvbiBnZXRNYXBQZXJpb2Qoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5wZXJpb2Q7CiAgfSwKICBnZXRNYXBEYXRhOiBmdW5jdGlvbiBnZXRNYXBEYXRhKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuZGF0YVtzdGF0ZS5wZXJpb2RdOwogIH0sCiAgaXNNYXBMb2FkZWQ6IGZ1bmN0aW9uIGlzTWFwTG9hZGVkKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuZGF0YXNldHMgPT09IDM7CiAgfSwKICBpc01hcFByZWxvYWQ6IGZ1bmN0aW9uIGlzTWFwUHJlbG9hZChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmRhdGFzZXRzID4gMDsKICB9Cn07CnZhciBhY3Rpb25zID0gKF9hY3Rpb25zID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgTUFQX1JFUVVFU1QsIGZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgdmFyIGNvbW1pdCwKICAgICAgICBkaXNwYXRjaCwKICAgICAgICBwZXJpb2QsCiAgICAgICAgciwKICAgICAgICBfYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQsIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDsKICAgICAgICAgICAgcGVyaW9kID0gX2FyZ3MubGVuZ3RoID4gMSAmJiBfYXJnc1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMV0gOiBzdGF0ZS5wZXJpb2Q7CiAgICAgICAgICAgIGNvbW1pdChNQVBfUkVRVUVTVCk7CgogICAgICAgICAgICBpZiAoc3RhdGUuZGF0YVtwZXJpb2RdLmxlbmd0aCkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIERhdGFTZXJ2aWNlLmdldE1hcERhdGEocGVyaW9kKTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIHIgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByLnN0YXR1cy5kYXRhLnN0YXR1cyA/IGNvbW1pdChNQVBfU1VDQ0VTUywgewogICAgICAgICAgICAgIGRhdGE6IHIuZGF0YSwKICAgICAgICAgICAgICBwZXJpb2Q6IHBlcmlvZAogICAgICAgICAgICB9KSA6IGRpc3BhdGNoKEFVVEhfTE9HT1VUKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGRpc3BhdGNoKE1BUF9QUkVMT0FEKTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCkpLCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIE1BUF9QUkVMT0FELCBmdW5jdGlvbiAoX3JlZjMpIHsKICB2YXIgY29tbWl0ID0gX3JlZjMuY29tbWl0OwogIHN0YXRlLnBlcmlvZHMuZm9yRWFjaCggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocCkgewogICAgICB2YXIgcjsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBpZiAoc3RhdGUuZGF0YVtwLmlkXS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBEYXRhU2VydmljZS5nZXRNYXBEYXRhKHAuaWQpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHIgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBjb21taXQoTUFQX1NVQ0NFU1MsIHsKICAgICAgICAgICAgICAgIGRhdGE6IHIuZGF0YSwKICAgICAgICAgICAgICAgIHBlcmlvZDogcC5pZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiAoX3gyKSB7CiAgICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCkpOwp9KSwgX2RlZmluZVByb3BlcnR5KF9hY3Rpb25zLCBNQVBfU1dJVENILCBmdW5jdGlvbiAoX3JlZjUsIHBlcmlvZCkgewogIHZhciBjb21taXQgPSBfcmVmNS5jb21taXQ7CiAgY29tbWl0KE1BUF9TV0lUQ0gsIHBlcmlvZCk7Cn0pLCBfYWN0aW9ucyk7CnZhciBtdXRhdGlvbnMgPSAoX211dGF0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgTUFQX1JFUVVFU1QsIGZ1bmN0aW9uIChzdGF0ZSkgewogIHN0YXRlLmxvYWRlZCA9IGZhbHNlOwp9KSwgX2RlZmluZVByb3BlcnR5KF9tdXRhdGlvbnMsIE1BUF9TVUNDRVNTLCBmdW5jdGlvbiAoc3RhdGUsIHJlc3BvbnNlKSB7CiAgc3RhdGUuZGF0YVtyZXNwb25zZS5wZXJpb2RdID0gcmVzcG9uc2UuZGF0YTsKICBzdGF0ZS5sb2FkZWQgPSB0cnVlOwogIHN0YXRlLmRhdGFzZXRzICs9IDE7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgTUFQX1NXSVRDSCwgZnVuY3Rpb24gKHN0YXRlLCBwZXJpb2QpIHsKICBzdGF0ZS5wZXJpb2QgPSBwZXJpb2Q7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgQVVUSF9MT0dPVVQsIGZ1bmN0aW9uIChzdGF0ZSkgewogIHN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgbWFwRGF0YU1vZGVsKTsKfSksIF9tdXRhdGlvbnMpOwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIGdldHRlcnM6IGdldHRlcnMsCiAgYWN0aW9uczogYWN0aW9ucywKICBtdXRhdGlvbnM6IG11dGF0aW9ucwp9Ow=="},{"version":3,"sources":["/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/store/modules/charts-map.js"],"names":["MAP_REQUEST","MAP_SUCCESS","MAP_PRELOAD","MAP_SWITCH","MAP_ERROR","DataService","AUTH_LOGOUT","mapDataModel","state","Object","assign","getters","getMapPeriod","period","getMapData","data","isMapLoaded","datasets","isMapPreload","actions","commit","dispatch","length","r","status","periods","forEach","p","id","mutations","loaded","response"],"mappings":"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","sourcesContent":["import {\n  MAP_REQUEST,\n  MAP_SUCCESS,\n  MAP_PRELOAD,\n  MAP_SWITCH,\n  MAP_ERROR\n} from \"../actions/charts-map\";\n\nimport DataService from \"../../api/data.service\";\nimport { AUTH_LOGOUT } from \"../actions/auth\";\nimport mapDataModel from \"../models/map\";\n\nconst state = Object.assign({}, mapDataModel);\n\nconst getters = {\n  getMapPeriod: state => state.period,\n  getMapData: state => state.data[state.period],\n  isMapLoaded: state => state.datasets === 3,\n  isMapPreload: state => state.datasets > 0,\n};\n\nconst actions = {\n  [MAP_REQUEST]: async ({ commit, dispatch }, period = state.period) => {\n    commit(MAP_REQUEST);\n    if (!state.data[period].length) {\n      const r = await DataService.getMapData(period);\n      r.status.data.status\n        ? commit(MAP_SUCCESS, { data: r.data, period: period })\n        : dispatch(AUTH_LOGOUT);\n    }\n    dispatch(MAP_PRELOAD);\n  },\n  [MAP_PRELOAD]: ({ commit }) => {\n    state.periods.forEach(async p => {\n      if (!state.data[p.id].length) {\n        const r = await DataService.getMapData(p.id);\n        commit(MAP_SUCCESS, { data: r.data, period: p.id });\n      }\n    });\n  },\n  [MAP_SWITCH]: ({ commit }, period) => {\n    commit(MAP_SWITCH, period);\n  }\n};\n\nconst mutations = {\n  [MAP_REQUEST]: state => {\n    state.loaded = false;\n  },\n  [MAP_SUCCESS]: (state, response) => {\n    state.data[response.period] = response.data;\n    state.loaded = true;\n    state.datasets += 1;\n  },\n  [MAP_SWITCH]: (state, period) => {\n    state.period = period;\n  },\n  [AUTH_LOGOUT]: state => {\n    state = Object.assign({}, mapDataModel);\n  }\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};\n"]}]}