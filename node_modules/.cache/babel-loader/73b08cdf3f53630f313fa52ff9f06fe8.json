{"remainingRequest":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js!/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/mentions.service.js","dependencies":[{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/mentions.service.js","mtime":1586415767563},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9pbm1lMS9QaHBzdG9ybVByb2plY3RzL25ldy1jcC9kZXZlbG9wLmlubWUtZ21haWwuY29tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvaW5tZTEvUGhwc3Rvcm1Qcm9qZWN0cy9uZXctY3AvZGV2ZWxvcC5pbm1lLWdtYWlsLmNvbS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIi9Vc2Vycy9pbm1lMS9QaHBzdG9ybVByb2plY3RzL25ldy1jcC9kZXZlbG9wLmlubWUtZ21haWwuY29tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlciI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL1VzZXJzL2lubWUxL1BocHN0b3JtUHJvamVjdHMvbmV3LWNwL2RldmVsb3AuaW5tZS1nbWFpbC5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IF93cmFwTmF0aXZlU3VwZXIgZnJvbSAiL1VzZXJzL2lubWUxL1BocHN0b3JtUHJvamVjdHMvbmV3LWNwL2RldmVsb3AuaW5tZS1nbWFpbC5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3dyYXBOYXRpdmVTdXBlciI7CmltcG9ydCBBcGlTZXJ2aWNlIGZyb20gIi4uL3NlcnZpY2VzL2FwaS5zZXJ2aWNlIjsKaW1wb3J0IHsgQVBJX0RBVEEgfSBmcm9tICIuL2FwaS5lbmRwb2ludHMiOwppbXBvcnQgeyBEYXRhRXJyb3IgfSBmcm9tICIuL2RhdGEuc2VydmljZSI7Cgp2YXIgTWVudGlvbnNFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7CiAgX2luaGVyaXRzKE1lbnRpb25zRXJyb3IsIF9FcnJvcik7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTWVudGlvbnNFcnJvcik7CgogIGZ1bmN0aW9uIE1lbnRpb25zRXJyb3IoZXJyb3JDb2RlLCBtZXNzYWdlKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnRpb25zRXJyb3IpOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSk7CiAgICBfdGhpcy5uYW1lID0gX3RoaXMuY29uc3RydWN0b3IubmFtZTsKICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOwogICAgX3RoaXMuZXJyb3JDb2RlID0gZXJyb3JDb2RlOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgcmV0dXJuIE1lbnRpb25zRXJyb3I7Cn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7Cgp2YXIgTWVudGlvbnNTZXJ2aXZlID0gewogIGdldE1lbnRpb25zOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX2dldE1lbnRpb25zID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKF9yZWYpIHsKICAgICAgdmFyIHBlcl9wYWdlLCByZWdpb25faWQsIGtleXdvcmRfaWQsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcGVyX3BhZ2UgPSBfcmVmLnBlcl9wYWdlLCByZWdpb25faWQgPSBfcmVmLnJlZ2lvbl9pZCwga2V5d29yZF9pZCA9IF9yZWYua2V5d29yZF9pZDsKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gQXBpU2VydmljZS5wb3N0KEFQSV9EQVRBLk1FTlRJT05TX0xJU1QsIHsKICAgICAgICAgICAgICAgIHBlcl9wYWdlOiBwZXJfcGFnZSwKICAgICAgICAgICAgICAgIHJlZ2lvbl9pZDogcmVnaW9uX2lkLAogICAgICAgICAgICAgICAga2V5d29yZF9pZDoga2V5d29yZF9pZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzICYmIHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZSwKICAgICAgICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDk7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICB0aHJvdyBuZXcgTWVudGlvbnNFcnJvcihfY29udGV4dC50MC5yZXNwb25zZS5zdGF0dXMsIF9jb250ZXh0LnQwLnJlc3BvbnNlLmRhdGEuZGV0YWlsKTsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMSwgOV1dKTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiBnZXRNZW50aW9ucyhfeCkgewogICAgICByZXR1cm4gX2dldE1lbnRpb25zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGdldE1lbnRpb25zOwogIH0oKSwKICBnZXRNZW50aW9uc0ZpbHRlcjogZnVuY3Rpb24gKCkgewogICAgdmFyIF9nZXRNZW50aW9uc0ZpbHRlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLmdldChBUElfREFUQS5NRU5USU9OU19GSUxURVIpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5zdGF0dXMgPT0gMjAwKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZSwKICAgICAgICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDExOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IE1lbnRpb25zRXJyb3IoX2NvbnRleHQyLnQwLnJlc3BvbnNlLnN0YXR1cywgX2NvbnRleHQyLnQwLnJlc3BvbnNlLmRhdGEuZGV0YWlsKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1swLCA4XV0pOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIGdldE1lbnRpb25zRmlsdGVyKCkgewogICAgICByZXR1cm4gX2dldE1lbnRpb25zRmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGdldE1lbnRpb25zRmlsdGVyOwogIH0oKSwKICBnZXROZWdhdGl2ZURhdGE6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfZ2V0TmVnYXRpdmVEYXRhID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhfcmVmMikgewogICAgICB2YXIgcmVnaW9uX2lkLCBwZXJpb2QsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHJlZ2lvbl9pZCA9IF9yZWYyLnJlZ2lvbl9pZCwgcGVyaW9kID0gX3JlZjIucGVyaW9kOwogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIEFwaVNlcnZpY2UucG9zdChBUElfREFUQS5ORUdBVElWRV9NRU5USU9OUywgewogICAgICAgICAgICAgICAgcmVnaW9uX2lkOiByZWdpb25faWQsCiAgICAgICAgICAgICAgICBwZXJpb2Q6IHBlcmlvZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5zdGF0dXMgPT0gMjAwKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsCiAgICAgICAgICAgICAgICBkYXRhOiByZXNwb25zZS5kYXRhCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDk7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgIHRocm93IG5ldyBEYXRhRXJyb3IoX2NvbnRleHQzLnQwLnJlc3BvbnNlLnN0YXR1cywgX2NvbnRleHQzLnQwLnJlc3BvbnNlLmRhdGEuZGV0YWlsKTsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1sxLCA5XV0pOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIGdldE5lZ2F0aXZlRGF0YShfeDIpIHsKICAgICAgcmV0dXJuIF9nZXROZWdhdGl2ZURhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gZ2V0TmVnYXRpdmVEYXRhOwogIH0oKQp9OwpleHBvcnQgZGVmYXVsdCBNZW50aW9uc1NlcnZpdmU7CmV4cG9ydCB7IE1lbnRpb25zU2Vydml2ZSwgTWVudGlvbnNFcnJvciB9Ow=="},{"version":3,"sources":["/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/mentions.service.js"],"names":["ApiService","API_DATA","DataError","MentionsError","errorCode","message","name","constructor","Error","MentionsServive","getMentions","per_page","region_id","keyword_id","post","MENTIONS_LIST","response","status","data","detail","getMentionsFilter","get","MENTIONS_FILTER","getNegativeData","period","NEGATIVE_MENTIONS"],"mappings":"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","sourcesContent":["import ApiService from \"../services/api.service\";\nimport { API_DATA } from \"./api.endpoints\";\nimport {DataError} from \"./data.service\";\n\nclass MentionsError extends Error {\n  constructor(errorCode, message) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    this.errorCode = errorCode;\n  }\n}\nconst MentionsServive = {\n  getMentions: async ({per_page, region_id, keyword_id}) => {\n    try {\n      const response = await ApiService.post(API_DATA.MENTIONS_LIST,  {\n        per_page: per_page, region_id: region_id, keyword_id: keyword_id });\n      if (response && response.status && response.status == 200) {\n        return { status: response, data: response.data };\n      }\n    } catch (error) {\n      throw new MentionsError(error.response.status, error.response.data.detail);\n    }\n  },\n  getMentionsFilter: async () => {\n    try {\n      const response = await ApiService.get(API_DATA.MENTIONS_FILTER);\n      if (response && response.status && response.status == 200) {\n        return { status: response, data: response.data };\n      }\n    } catch (error) {\n      throw new MentionsError(error.response.status, error.response.data.detail);\n    }\n  },\n  getNegativeData: async ({region_id, period}) => {\n    try {\n      const response = await ApiService.post(API_DATA.NEGATIVE_MENTIONS, { region_id: region_id, period: period });\n      if (response && response.status && response.status == 200) {\n        return { status: response.status, data: response.data };\n      }\n    } catch (error) {\n      throw new DataError(error.response.status, error.response.data.detail);\n    }\n  }\n};\n\n\nexport default MentionsServive;\nexport { MentionsServive, MentionsError };\n"]}]}