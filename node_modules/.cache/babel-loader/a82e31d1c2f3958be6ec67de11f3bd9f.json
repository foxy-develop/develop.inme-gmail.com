{"remainingRequest":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js!/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/data.service.js","dependencies":[{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/data.service.js","mtime":1585745637805},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/inme1/PhpstormProjects/new-cp/develop.inme-gmail.com/src/api/data.service.js"],"names":["ApiService","API_DATA","DataError","errorCode","message","name","constructor","Error","prepareData","charts","response","labels","data","statistics","dates","positive","values","total","domains","total_domains","links","total_links","negative","map","formatData","stats","el","id","country_short_title_ru","country_title_ru","value","value_negative","total_negative","region_id","id_country","DataServive","getChartsData","period","get","CHARTS_BY_PERIOD","status","detail","getMapData","post","MAP_DATA","getCurrentData","type","CURRENT_MENTIONS"],"mappings":"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","sourcesContent":["import ApiService from \"../api/api.service\";\nimport { API_DATA } from \"./api.endpoints\";\n\nclass DataError extends Error {\n  constructor(errorCode, message) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    this.errorCode = errorCode;\n  }\n}\n\nconst prepareData = {\n  charts: response => {\n    return {\n      labels: response.data.statistics.dates,\n      positive: {\n        data: response.data.statistics.positive.values,\n        total: {\n          domains: response.data.statistics.positive.total_domains,\n          links: response.data.statistics.positive.total_links\n        }\n      },\n      negative: {\n        data: response.data.statistics.negative.values,\n        total: {\n          domains: response.data.statistics.negative.total_domains,\n          links: response.data.statistics.negative.total_links\n        }\n      }\n    };\n  },\n  map: response => {\n    const formatData = response.data.stats.map(el => {\n      return {\n        id: el.country_short_title_ru != 'HK' ? el.country_short_title_ru : 'CN',\n        name: el.country_short_title_ru != 'HK' ? el.country_title_ru : 'Китай'  ,\n        value: el.total,\n        value_negative: el.total_negative,\n        region_id: el.id_country\n      };\n    });\n    return formatData;\n  }\n};\n\nconst DataServive = {\n  getChartsData: async period => {\n    try {\n      const response = await ApiService.get(API_DATA.CHARTS_BY_PERIOD + period);\n      if (response && response.status && response.status == 200) {\n        return { status: response, data: prepareData.charts(response) };\n      }\n    } catch (error) {\n      throw new DataError(error.response.status, error.response.data.detail);\n    }\n  },\n  getMapData: async period => {\n    try {\n      const response = await ApiService.post(API_DATA.MAP_DATA, { period: period });\n      if (response && response.status && response.status == 200) {\n        return { status: response, data: prepareData.map(response) };\n      }\n    } catch (error) {\n      throw new DataError(error.response.status, error.response.data.detail);\n    }\n  },\n  getCurrentData: async (type, period) => {\n    try {\n      const response = await ApiService.post(API_DATA.CURRENT_MENTIONS, {\n        type: type,\n        period: period\n      });\n      if (response && response.status && response.status == 200) {\n        return { status: response.status, data: response.data };\n      }\n    } catch (error) {\n      throw new DataError(error.response.status, error.response.data.detail);\n    }\n  }\n};\n\n\nexport default DataServive;\nexport { DataServive, DataError };\n"]}]}