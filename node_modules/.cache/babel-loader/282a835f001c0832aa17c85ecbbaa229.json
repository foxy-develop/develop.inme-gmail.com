{"remainingRequest":"/Users/inme/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js!/Users/inme/new-cp/develop.inme-gmail.com/src/store/modules/auth.js","dependencies":[{"path":"/Users/inme/new-cp/develop.inme-gmail.com/src/store/modules/auth.js","mtime":1585571749631},{"path":"/Users/inme/new-cp/develop.inme-gmail.com/node_modules/cache-loader/dist/cjs.js","mtime":1585560594906},{"path":"/Users/inme/new-cp/develop.inme-gmail.com/node_modules/babel-loader/lib/index.js","mtime":1585560594458}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvaW5tZS9uZXctY3AvZGV2ZWxvcC5pbm1lLWdtYWlsLmNvbS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvaW5tZS9uZXctY3AvZGV2ZWxvcC5pbm1lLWdtYWlsLmNvbS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Cgp2YXIgX2FjdGlvbnMsIF9tdXRhdGlvbnM7CgovKiBlc2xpbnQtZGlzYWJsZSBwcm9taXNlL3BhcmFtLW5hbWVzICovCmltcG9ydCB7IEFVVEhfUkVRVUVTVCwgQVVUSF9FUlJPUiwgQVVUSF9MT0dJTiwgQVVUSF9TVUNDRVNTLCBBVVRIX0xPR09VVCB9IGZyb20gIi4uL2FjdGlvbnMvYXV0aCI7CmltcG9ydCBBdXRoU2VydmljZSBmcm9tICIuLi8uLi9hcGkvYXV0aC5zZXJ2aWNlIjsKaW1wb3J0IHsgVG9rZW5TZXJ2aWNlIH0gZnJvbSAiLi4vLi4vc2VydmljZXMvc3RvcmFnZS5zZXJ2aWNlIjsKaW1wb3J0IHJvdXRlciBmcm9tICIuLi8uLi9yb3V0ZXIiOwppbXBvcnQgeyBVU0VSX1JFUVVFU1QgfSBmcm9tICIuLi9hY3Rpb25zL3VzZXIiOwp2YXIgc3RhdGUgPSB7CiAgc3RhdHVzOiBmYWxzZSwKICBlcnJvck1lc3NhZ2U6IG51bGwsCiAgcGhvbmU6IG51bGwsCiAgdG9rZW46IFRva2VuU2VydmljZS5nZXQoKSB8fCAnJwp9Owp2YXIgZ2V0dGVycyA9IHsKICBpc1Bob25lQXBwcm92ZWQ6IGZ1bmN0aW9uIGlzUGhvbmVBcHByb3ZlZChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnBob25lOwogIH0sCiAgZ2V0RXJyb3JNZXNzYWdlOiBmdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2Uoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5lcnJvck1lc3NhZ2U7CiAgfSwKICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZChzdGF0ZSkgewogICAgcmV0dXJuICEhc3RhdGUudG9rZW47CiAgfQp9Owp2YXIgYWN0aW9ucyA9IChfYWN0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIEFVVEhfUkVRVUVTVCwgZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmLCBwaG9uZSkgewogICAgdmFyIGNvbW1pdCwgcjsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgIGNvbW1pdChBVVRIX1JFUVVFU1QpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuIEF1dGhTZXJ2aWNlLmF1dGgocGhvbmUpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgciA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIHIuc3RhdHVzID8gY29tbWl0KEFVVEhfU1VDQ0VTUywgcGhvbmUpIDogY29tbWl0KEFVVEhfRVJST1IsIHIubWVzc2FnZSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeCwgX3gyKSB7CiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCkpLCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIEFVVEhfTE9HSU4sIGZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKF9yZWYzLCBfcmVmNCkgewogICAgdmFyIGNvbW1pdCwgZGlzcGF0Y2gsIHBhc3N3b3JkLCBwaG9uZSwgcjsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmMy5kaXNwYXRjaDsKICAgICAgICAgICAgcGFzc3dvcmQgPSBfcmVmNC5wYXNzd29yZCwgcGhvbmUgPSBfcmVmNC5waG9uZTsKICAgICAgICAgICAgY29tbWl0KEFVVEhfUkVRVUVTVCk7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIEF1dGhTZXJ2aWNlLmxvZ2luKHBhc3N3b3JkLCBwaG9uZSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICByID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICBpZiAoci5zdGF0dXMpIHsKICAgICAgICAgICAgICBjb21taXQoQVVUSF9TVUNDRVNTLCByLnRva2VuKTsKICAgICAgICAgICAgICByb3V0ZXIucHVzaCgiLyIpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKFVTRVJfUkVRVUVTVCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29tbWl0KEFVVEhfRVJST1IsIHIubWVzc2FnZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByLnN0YXR1cyk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94MywgX3g0KSB7CiAgICByZXR1cm4gX3JlZjUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCkpLCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIEFVVEhfTE9HT1VULCBmdW5jdGlvbiAoX3JlZjYpIHsKICB2YXIgY29tbWl0ID0gX3JlZjYuY29tbWl0OwogIEF1dGhTZXJ2aWNlLmxvZ291dCgpOwogIGNvbW1pdChBVVRIX0xPR09VVCk7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIEFVVEhfRVJST1IsIGZ1bmN0aW9uIChfcmVmNywgbXNnKSB7CiAgdmFyIGNvbW1pdCA9IF9yZWY3LmNvbW1pdCwKICAgICAgZGlzcGF0Y2ggPSBfcmVmNy5kaXNwYXRjaDsKICBjb21taXQoQVVUSF9FUlJPUiwgbXNnKTsKICBkaXNwYXRjaChBVVRIX0xPR09VVCk7Cn0pLCBfYWN0aW9ucyk7CnZhciBtdXRhdGlvbnMgPSAoX211dGF0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgQVVUSF9SRVFVRVNULCBmdW5jdGlvbiAoc3RhdGUpIHsKICBzdGF0ZS5zdGF0dXMgPSAibG9hZGluZyI7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgQVVUSF9TVUNDRVNTLCBmdW5jdGlvbiAoc3RhdGUsIHRva2VuKSB7CiAgc3RhdGUudG9rZW4gPSB0b2tlbjsKICBzdGF0ZS5zdGF0dXMgPSB0cnVlOwogIHN0YXRlLnBob25lID0gdHJ1ZTsKICBzdGF0ZS5lcnJvck1lc3NhZ2UgPSAiIjsKfSksIF9kZWZpbmVQcm9wZXJ0eShfbXV0YXRpb25zLCBBVVRIX0VSUk9SLCBmdW5jdGlvbiAoc3RhdGUsIG1zZykgewogIHN0YXRlLnRva2VuID0gVG9rZW5TZXJ2aWNlLmdldCgpIHx8ICcnOwogIHN0YXRlLmVycm9yTWVzc2FnZSA9IG1zZzsKICBzdGF0ZS5zdGF0dXMgPSAiZmFsc2UiOwp9KSwgX2RlZmluZVByb3BlcnR5KF9tdXRhdGlvbnMsIEFVVEhfTE9HT1VULCBmdW5jdGlvbiAoKSB7CiAgc3RhdGUucGhvbmUgPSBmYWxzZTsKICBzdGF0ZS5lcnJvck1lc3NhZ2UgPSBudWxsOwogIHN0YXRlLnRva2VuID0gVG9rZW5TZXJ2aWNlLmdldCgpIHx8ICcnOwp9KSwgX211dGF0aW9ucyk7CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgZ2V0dGVyczogZ2V0dGVycywKICBhY3Rpb25zOiBhY3Rpb25zLAogIG11dGF0aW9uczogbXV0YXRpb25zCn07"},{"version":3,"sources":["/Users/inme/new-cp/develop.inme-gmail.com/src/store/modules/auth.js"],"names":["AUTH_REQUEST","AUTH_ERROR","AUTH_LOGIN","AUTH_SUCCESS","AUTH_LOGOUT","AuthService","TokenService","router","USER_REQUEST","state","status","errorMessage","phone","token","get","getters","isPhoneApproved","getErrorMessage","isAuthenticated","actions","commit","auth","r","message","dispatch","password","login","push","then","logout","msg","mutations"],"mappings":"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","sourcesContent":["\n/* eslint-disable promise/param-names */\nimport {\n  AUTH_REQUEST,\n  AUTH_ERROR,\n  AUTH_LOGIN,\n  AUTH_SUCCESS,\n  AUTH_LOGOUT\n} from \"../actions/auth\";\n\nimport AuthService from \"../../api/auth.service\";\nimport { TokenService } from \"../../services/storage.service\";\nimport router from \"../../router\";\nimport { USER_REQUEST } from \"../actions/user\";\n\nconst state = {\n  status: false,\n  errorMessage: null,\n  phone: null,\n  token: TokenService.get() || ''\n};\n\nconst getters = {\n  isPhoneApproved: state => state.phone,\n  getErrorMessage: state => state.errorMessage,\n  isAuthenticated: state => !!state.token\n};\n\nconst actions = {\n  [AUTH_REQUEST]: async ({ commit }, phone) => {\n    commit(AUTH_REQUEST);\n    const r = await AuthService.auth(phone);\n    r.status ? commit(AUTH_SUCCESS, phone) : commit(AUTH_ERROR, r.message);\n  },\n  [AUTH_LOGIN]: async ({ commit, dispatch }, { password, phone }) => {\n    commit(AUTH_REQUEST);\n    const r = await AuthService.login(password, phone);\n    if (r.status) {\n      commit(AUTH_SUCCESS, r.token);\n      router.push(\"/\").then(() => dispatch(USER_REQUEST));\n    } else {\n      commit(AUTH_ERROR, r.message);\n    }\n    return r.status;\n  },\n  [AUTH_LOGOUT]: ({ commit }) => {\n    AuthService.logout();\n    commit(AUTH_LOGOUT);\n  },\n  [AUTH_ERROR]: ({ commit, dispatch }, msg) => {\n    commit(AUTH_ERROR, msg);\n    dispatch(AUTH_LOGOUT);\n  }\n};\n\nconst mutations = {\n  [AUTH_REQUEST]: state => {\n    state.status = \"loading\";\n  },\n  [AUTH_SUCCESS]: (state, token) => {\n    state.token = token;\n    state.status = true;\n    state.phone = true;\n    state.errorMessage = \"\";\n  },\n  [AUTH_ERROR]: (state, msg) => {\n    state.token = TokenService.get() || ''\n    state.errorMessage = msg;\n    state.status = \"false\";\n  },\n  [AUTH_LOGOUT]: () => {\n    state.phone = false;\n    state.errorMessage = null;\n    state.token = TokenService.get() || ''\n  }\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};\n"]}]}